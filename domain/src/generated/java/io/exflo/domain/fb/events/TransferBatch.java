// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb.events;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TransferBatch extends Table {
  public static TransferBatch getRootAsTransferBatch(ByteBuffer _bb) { return getRootAsTransferBatch(_bb, new TransferBatch()); }
  public static TransferBatch getRootAsTransferBatch(ByteBuffer _bb, TransferBatch obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public TransferBatch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.exflo.domain.fb.Bytes20 contract() { return contract(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 contract(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 operator() { return operator(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 operator(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 from() { return from(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 from(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 to() { return to(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 to(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.UInt256 ids(int j) { return ids(new io.exflo.domain.fb.UInt256(), j); }
  public io.exflo.domain.fb.UInt256 ids(io.exflo.domain.fb.UInt256 obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int idsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public io.exflo.domain.fb.UInt256 values(int j) { return values(new io.exflo.domain.fb.UInt256(), j); }
  public io.exflo.domain.fb.UInt256 values(io.exflo.domain.fb.UInt256 obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }

  public static int createTransferBatch(FlatBufferBuilder builder,
      int contractOffset,
      int operatorOffset,
      int fromOffset,
      int toOffset,
      int idsOffset,
      int valuesOffset) {
    builder.startObject(6);
    TransferBatch.addValues(builder, valuesOffset);
    TransferBatch.addIds(builder, idsOffset);
    TransferBatch.addTo(builder, toOffset);
    TransferBatch.addFrom(builder, fromOffset);
    TransferBatch.addOperator(builder, operatorOffset);
    TransferBatch.addContract(builder, contractOffset);
    return TransferBatch.endTransferBatch(builder);
  }

  public static void startTransferBatch(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addContract(FlatBufferBuilder builder, int contractOffset) { builder.addOffset(0, contractOffset, 0); }
  public static void addOperator(FlatBufferBuilder builder, int operatorOffset) { builder.addOffset(1, operatorOffset, 0); }
  public static void addFrom(FlatBufferBuilder builder, int fromOffset) { builder.addOffset(2, fromOffset, 0); }
  public static void addTo(FlatBufferBuilder builder, int toOffset) { builder.addOffset(3, toOffset, 0); }
  public static void addIds(FlatBufferBuilder builder, int idsOffset) { builder.addOffset(4, idsOffset, 0); }
  public static int createIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(5, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTransferBatch(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

