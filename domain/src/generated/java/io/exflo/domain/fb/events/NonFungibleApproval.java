// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb.events;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NonFungibleApproval extends Table {
  public static NonFungibleApproval getRootAsNonFungibleApproval(ByteBuffer _bb) { return getRootAsNonFungibleApproval(_bb, new NonFungibleApproval()); }
  public static NonFungibleApproval getRootAsNonFungibleApproval(ByteBuffer _bb, NonFungibleApproval obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public NonFungibleApproval __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.exflo.domain.fb.Bytes20 contract() { return contract(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 contract(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 owner() { return owner(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 owner(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 approved() { return approved(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 approved(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.UInt256 tokenId() { return tokenId(new io.exflo.domain.fb.UInt256()); }
  public io.exflo.domain.fb.UInt256 tokenId(io.exflo.domain.fb.UInt256 obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createNonFungibleApproval(FlatBufferBuilder builder,
      int contractOffset,
      int ownerOffset,
      int approvedOffset,
      int tokenIdOffset) {
    builder.startObject(4);
    NonFungibleApproval.addTokenId(builder, tokenIdOffset);
    NonFungibleApproval.addApproved(builder, approvedOffset);
    NonFungibleApproval.addOwner(builder, ownerOffset);
    NonFungibleApproval.addContract(builder, contractOffset);
    return NonFungibleApproval.endNonFungibleApproval(builder);
  }

  public static void startNonFungibleApproval(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addContract(FlatBufferBuilder builder, int contractOffset) { builder.addOffset(0, contractOffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(1, ownerOffset, 0); }
  public static void addApproved(FlatBufferBuilder builder, int approvedOffset) { builder.addOffset(2, approvedOffset, 0); }
  public static void addTokenId(FlatBufferBuilder builder, int tokenIdOffset) { builder.addOffset(3, tokenIdOffset, 0); }
  public static int endNonFungibleApproval(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

