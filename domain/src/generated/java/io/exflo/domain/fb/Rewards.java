// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Rewards extends Table {
  public static Rewards getRootAsRewards(ByteBuffer _bb) { return getRootAsRewards(_bb, new Rewards()); }
  public static Rewards getRootAsRewards(ByteBuffer _bb, Rewards obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Rewards __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Reward rewards(int j) { return rewards(new Reward(), j); }
  public Reward rewards(Reward obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int rewardsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createRewards(FlatBufferBuilder builder,
      int rewardsOffset) {
    builder.startObject(1);
    Rewards.addRewards(builder, rewardsOffset);
    return Rewards.endRewards(builder);
  }

  public static void startRewards(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addRewards(FlatBufferBuilder builder, int rewardsOffset) { builder.addOffset(0, rewardsOffset, 0); }
  public static int createRewardsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRewardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRewards(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

