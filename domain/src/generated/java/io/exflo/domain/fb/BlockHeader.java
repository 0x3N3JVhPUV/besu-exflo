// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BlockHeader extends Table {
  public static BlockHeader getRootAsBlockHeader(ByteBuffer _bb) { return getRootAsBlockHeader(_bb, new BlockHeader()); }
  public static BlockHeader getRootAsBlockHeader(ByteBuffer _bb, BlockHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public BlockHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bytes32 hash() { return hash(new Bytes32()); }
  public Bytes32 hash(Bytes32 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes32 parentHash() { return parentHash(new Bytes32()); }
  public Bytes32 parentHash(Bytes32 obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes32 ommersHash() { return ommersHash(new Bytes32()); }
  public Bytes32 ommersHash(Bytes32 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes20 coinbase() { return coinbase(new Bytes20()); }
  public Bytes20 coinbase(Bytes20 obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes32 stateRoot() { return stateRoot(new Bytes32()); }
  public Bytes32 stateRoot(Bytes32 obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes32 transactionsRoot() { return transactionsRoot(new Bytes32()); }
  public Bytes32 transactionsRoot(Bytes32 obj) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes32 receiptsRoot() { return receiptsRoot(new Bytes32()); }
  public Bytes32 receiptsRoot(Bytes32 obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Bytes256 logsBloom() { return logsBloom(new Bytes256()); }
  public Bytes256 logsBloom(Bytes256 obj) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public UInt256 difficulty() { return difficulty(new UInt256()); }
  public UInt256 difficulty(UInt256 obj) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public UInt256 totalDifficulty() { return totalDifficulty(new UInt256()); }
  public UInt256 totalDifficulty(UInt256 obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long number() { int o = __offset(24); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long gasLimit() { int o = __offset(26); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long gasUsed() { int o = __offset(28); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long timestamp() { int o = __offset(30); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public byte extraData(int j) { int o = __offset(32); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int extraDataLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer extraDataAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer extraDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  public Bytes32 mixHash() { return mixHash(new Bytes32()); }
  public Bytes32 mixHash(Bytes32 obj) { int o = __offset(34); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long nonce() { int o = __offset(36); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createBlockHeader(FlatBufferBuilder builder,
      int hashOffset,
      int parentHashOffset,
      int ommersHashOffset,
      int coinbaseOffset,
      int stateRootOffset,
      int transactionsRootOffset,
      int receiptsRootOffset,
      int logsBloomOffset,
      int difficultyOffset,
      int totalDifficultyOffset,
      long number,
      long gasLimit,
      long gasUsed,
      long timestamp,
      int extraDataOffset,
      int mixHashOffset,
      long nonce) {
    builder.startObject(17);
    BlockHeader.addNonce(builder, nonce);
    BlockHeader.addTimestamp(builder, timestamp);
    BlockHeader.addGasUsed(builder, gasUsed);
    BlockHeader.addGasLimit(builder, gasLimit);
    BlockHeader.addNumber(builder, number);
    BlockHeader.addMixHash(builder, mixHashOffset);
    BlockHeader.addExtraData(builder, extraDataOffset);
    BlockHeader.addTotalDifficulty(builder, totalDifficultyOffset);
    BlockHeader.addDifficulty(builder, difficultyOffset);
    BlockHeader.addLogsBloom(builder, logsBloomOffset);
    BlockHeader.addReceiptsRoot(builder, receiptsRootOffset);
    BlockHeader.addTransactionsRoot(builder, transactionsRootOffset);
    BlockHeader.addStateRoot(builder, stateRootOffset);
    BlockHeader.addCoinbase(builder, coinbaseOffset);
    BlockHeader.addOmmersHash(builder, ommersHashOffset);
    BlockHeader.addParentHash(builder, parentHashOffset);
    BlockHeader.addHash(builder, hashOffset);
    return BlockHeader.endBlockHeader(builder);
  }

  public static void startBlockHeader(FlatBufferBuilder builder) { builder.startObject(17); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(0, hashOffset, 0); }
  public static void addParentHash(FlatBufferBuilder builder, int parentHashOffset) { builder.addOffset(1, parentHashOffset, 0); }
  public static void addOmmersHash(FlatBufferBuilder builder, int ommersHashOffset) { builder.addOffset(2, ommersHashOffset, 0); }
  public static void addCoinbase(FlatBufferBuilder builder, int coinbaseOffset) { builder.addOffset(3, coinbaseOffset, 0); }
  public static void addStateRoot(FlatBufferBuilder builder, int stateRootOffset) { builder.addOffset(4, stateRootOffset, 0); }
  public static void addTransactionsRoot(FlatBufferBuilder builder, int transactionsRootOffset) { builder.addOffset(5, transactionsRootOffset, 0); }
  public static void addReceiptsRoot(FlatBufferBuilder builder, int receiptsRootOffset) { builder.addOffset(6, receiptsRootOffset, 0); }
  public static void addLogsBloom(FlatBufferBuilder builder, int logsBloomOffset) { builder.addOffset(7, logsBloomOffset, 0); }
  public static void addDifficulty(FlatBufferBuilder builder, int difficultyOffset) { builder.addOffset(8, difficultyOffset, 0); }
  public static void addTotalDifficulty(FlatBufferBuilder builder, int totalDifficultyOffset) { builder.addOffset(9, totalDifficultyOffset, 0); }
  public static void addNumber(FlatBufferBuilder builder, long number) { builder.addLong(10, number, 0L); }
  public static void addGasLimit(FlatBufferBuilder builder, long gasLimit) { builder.addLong(11, gasLimit, 0L); }
  public static void addGasUsed(FlatBufferBuilder builder, long gasUsed) { builder.addLong(12, gasUsed, 0L); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(13, timestamp, 0L); }
  public static void addExtraData(FlatBufferBuilder builder, int extraDataOffset) { builder.addOffset(14, extraDataOffset, 0); }
  public static int createExtraDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startExtraDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addMixHash(FlatBufferBuilder builder, int mixHashOffset) { builder.addOffset(15, mixHashOffset, 0); }
  public static void addNonce(FlatBufferBuilder builder, long nonce) { builder.addLong(16, nonce, 0L); }
  public static int endBlockHeader(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

