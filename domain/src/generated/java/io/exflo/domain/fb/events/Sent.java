// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb.events;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Sent extends Table {
  public static Sent getRootAsSent(ByteBuffer _bb) { return getRootAsSent(_bb, new Sent()); }
  public static Sent getRootAsSent(ByteBuffer _bb, Sent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Sent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.exflo.domain.fb.Bytes20 contract() { return contract(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 contract(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 operator() { return operator(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 operator(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 from() { return from(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 from(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.Bytes20 to() { return to(new io.exflo.domain.fb.Bytes20()); }
  public io.exflo.domain.fb.Bytes20 to(io.exflo.domain.fb.Bytes20 obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.exflo.domain.fb.UInt256 amount() { return amount(new io.exflo.domain.fb.UInt256()); }
  public io.exflo.domain.fb.UInt256 amount(io.exflo.domain.fb.UInt256 obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte data(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int dataLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public byte operatorData(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int operatorDataLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer operatorDataAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer operatorDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static int createSent(FlatBufferBuilder builder,
      int contractOffset,
      int operatorOffset,
      int fromOffset,
      int toOffset,
      int amountOffset,
      int dataOffset,
      int operatorDataOffset) {
    builder.startObject(7);
    Sent.addOperatorData(builder, operatorDataOffset);
    Sent.addData(builder, dataOffset);
    Sent.addAmount(builder, amountOffset);
    Sent.addTo(builder, toOffset);
    Sent.addFrom(builder, fromOffset);
    Sent.addOperator(builder, operatorOffset);
    Sent.addContract(builder, contractOffset);
    return Sent.endSent(builder);
  }

  public static void startSent(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addContract(FlatBufferBuilder builder, int contractOffset) { builder.addOffset(0, contractOffset, 0); }
  public static void addOperator(FlatBufferBuilder builder, int operatorOffset) { builder.addOffset(1, operatorOffset, 0); }
  public static void addFrom(FlatBufferBuilder builder, int fromOffset) { builder.addOffset(2, fromOffset, 0); }
  public static void addTo(FlatBufferBuilder builder, int toOffset) { builder.addOffset(3, toOffset, 0); }
  public static void addAmount(FlatBufferBuilder builder, int amountOffset) { builder.addOffset(4, amountOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(5, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addOperatorData(FlatBufferBuilder builder, int operatorDataOffset) { builder.addOffset(6, operatorDataOffset, 0); }
  public static int createOperatorDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startOperatorDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endSent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

