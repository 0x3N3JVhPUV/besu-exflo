// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Account extends Table {
  public static Account getRootAsAccount(ByteBuffer _bb) { return getRootAsAccount(_bb, new Account()); }
  public static Account getRootAsAccount(ByteBuffer _bb, Account obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Account __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bytes20 address() { return address(new Bytes20()); }
  public Bytes20 address(Bytes20 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long nonce() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public UInt256 balance() { return balance(new UInt256()); }
  public UInt256 balance(UInt256 obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte code(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int codeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer codeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer codeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public Bytes32 codeHash() { return codeHash(new Bytes32()); }
  public Bytes32 codeHash(Bytes32 obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createAccount(FlatBufferBuilder builder,
      int addressOffset,
      long nonce,
      int balanceOffset,
      int codeOffset,
      int codeHashOffset) {
    builder.startObject(5);
    Account.addNonce(builder, nonce);
    Account.addCodeHash(builder, codeHashOffset);
    Account.addCode(builder, codeOffset);
    Account.addBalance(builder, balanceOffset);
    Account.addAddress(builder, addressOffset);
    return Account.endAccount(builder);
  }

  public static void startAccount(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addAddress(FlatBufferBuilder builder, int addressOffset) { builder.addOffset(0, addressOffset, 0); }
  public static void addNonce(FlatBufferBuilder builder, long nonce) { builder.addLong(1, nonce, 0L); }
  public static void addBalance(FlatBufferBuilder builder, int balanceOffset) { builder.addOffset(2, balanceOffset, 0); }
  public static void addCode(FlatBufferBuilder builder, int codeOffset) { builder.addOffset(3, codeOffset, 0); }
  public static int createCodeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCodeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCodeHash(FlatBufferBuilder builder, int codeHashOffset) { builder.addOffset(4, codeHashOffset, 0); }
  public static int endAccount(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

