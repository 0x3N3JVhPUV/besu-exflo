// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Log extends Table {
  public static Log getRootAsLog(ByteBuffer _bb) { return getRootAsLog(_bb, new Log()); }
  public static Log getRootAsLog(ByteBuffer _bb, Log obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Log __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bytes20 logger() { return logger(new Bytes20()); }
  public Bytes20 logger(Bytes20 obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte data(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int dataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public LogTopic topics(int j) { return topics(new LogTopic(), j); }
  public LogTopic topics(LogTopic obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int topicsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createLog(FlatBufferBuilder builder,
      int loggerOffset,
      int dataOffset,
      int topicsOffset) {
    builder.startObject(3);
    Log.addTopics(builder, topicsOffset);
    Log.addData(builder, dataOffset);
    Log.addLogger(builder, loggerOffset);
    return Log.endLog(builder);
  }

  public static void startLog(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addLogger(FlatBufferBuilder builder, int loggerOffset) { builder.addOffset(0, loggerOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(1, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTopics(FlatBufferBuilder builder, int topicsOffset) { builder.addOffset(2, topicsOffset, 0); }
  public static int createTopicsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTopicsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLog(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

