// automatically generated by the FlatBuffers compiler, do not modify

package io.exflo.domain.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Block extends Table {
  public static Block getRootAsBlock(ByteBuffer _bb) { return getRootAsBlock(_bb, new Block()); }
  public static Block getRootAsBlock(ByteBuffer _bb, Block obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Block __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BlockHeader header() { return header(new BlockHeader()); }
  public BlockHeader header(BlockHeader obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public BlockBody body() { return body(new BlockBody()); }
  public BlockBody body(BlockBody obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Rewards rewards() { return rewards(new Rewards()); }
  public Rewards rewards(Rewards obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Account touchedAccounts(int j) { return touchedAccounts(new Account(), j); }
  public Account touchedAccounts(Account obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int touchedAccountsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public BalanceDelta balanceDeltas(int j) { return balanceDeltas(new BalanceDelta(), j); }
  public BalanceDelta balanceDeltas(BalanceDelta obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int balanceDeltasLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static int createBlock(FlatBufferBuilder builder,
      int headerOffset,
      int bodyOffset,
      int rewardsOffset,
      int touchedAccountsOffset,
      int balanceDeltasOffset) {
    builder.startObject(5);
    Block.addBalanceDeltas(builder, balanceDeltasOffset);
    Block.addTouchedAccounts(builder, touchedAccountsOffset);
    Block.addRewards(builder, rewardsOffset);
    Block.addBody(builder, bodyOffset);
    Block.addHeader(builder, headerOffset);
    return Block.endBlock(builder);
  }

  public static void startBlock(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addHeader(FlatBufferBuilder builder, int headerOffset) { builder.addOffset(0, headerOffset, 0); }
  public static void addBody(FlatBufferBuilder builder, int bodyOffset) { builder.addOffset(1, bodyOffset, 0); }
  public static void addRewards(FlatBufferBuilder builder, int rewardsOffset) { builder.addOffset(2, rewardsOffset, 0); }
  public static void addTouchedAccounts(FlatBufferBuilder builder, int touchedAccountsOffset) { builder.addOffset(3, touchedAccountsOffset, 0); }
  public static int createTouchedAccountsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTouchedAccountsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBalanceDeltas(FlatBufferBuilder builder, int balanceDeltasOffset) { builder.addOffset(4, balanceDeltasOffset, 0); }
  public static int createBalanceDeltasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBalanceDeltasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBlock(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishBlockBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedBlockBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

